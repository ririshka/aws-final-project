AWSTemplateFormatVersion: "2010-09-09"
Description: "This is my VPC created by Aiperi Mairambekova"
Parameters:
  TagsValue:
    Type: String
    Default: "Aiperi Mairambekova"
    
  VPCcidr:
    Type: String
    Default: 10.4.0.0/16

  PrivateSubnet1CIDR:
    Description: CIDR Private subnet 1
    Type: String
    Default: 10.4.0.0/24

  PrivateSubnet2CIDR:
    Description: CIDR Private subnet 2
    Type: String
    Default: 10.4.1.0/24

  PublicSubnet1CIDR:
    Description: CIDR Public subnet 1 
    Type: String
    Default: 10.4.2.0/24

  PublicSubnet2CIDR:
    Description: CIDR Public subnet 2
    Type: String
    Default: 10.4.3.0/24

  InstanceTypeParameter:
    Type: String
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t3.micro"
    Description: Choose instance type (t2.micro or t3.micro)

Mappings:
  AmiMapping:
    us-east-1:
      AmiId: "ami-0d7a109bf30624c99"
    us-east-2:
      AmiId: "ami-019f9b3318b7155c5"
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCcidr
      InstanceTenancy: "default"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue
  
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATGatewayEIP
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: "Owner"
          Value: !Ref TagsValue

  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: ririkeyyyy
      KeyType: rsa
      Tags:
        - Key: Owner
          Value: !Ref TagsValue


  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap [ AmiMapping, !Ref "AWS::Region", AmiId ]
        InstanceType: !Ref InstanceTypeParameter
        SecurityGroupIds: [!Ref SecurityGroup]
        KeyName: !Ref KeyPair
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo echo "<h1> Hello, this is Aiperi Mairambekova $HOSTNAME</h1>" > /var/www/html/index.html

  SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for lauch template, ELB, ASG
      GroupName: riri-sg
      VpcId: !Ref myVPC
      SecurityGroupIngress: 
         - CidrIp: 0.0.0.0/0
           FromPort: 22
           IpProtocol: tcp
           ToPort: 22
         - CidrIp: 0.0.0.0/0
           FromPort: 80
           IpProtocol: tcp
           ToPort: 80
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      

  TargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref myVPC
      TargetType: instance
      HealthCheckPath: /index.html
      HealthCheckEnabled: true
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Owner
          Value: !Ref TagsValue

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: RiriALB
      Type: application
      IpAddressType: ipv4
      Scheme: internal
      SecurityGroups:
      - !Ref SecurityGroup
      Subnets: 
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      Tags: 
        - Key: Owner
          Value: !Ref TagsValue

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '4'
      MinSize: '2'
      DesiredCapacity: '3'
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      TargetGroupARNs:
      - !Ref TargetGroups  
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB  
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroups

Outputs:
  myVPC:
    Description: Reference to created VPC
    Value: !Ref myVPC
  PublicSubnets:
    Description: List of public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PrivateSubnets:
    Description: List of private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
  ALB:
    Description: Reference to created ALB
    Value: !Ref ALB
  ALBDNSname:
    Description: DNS Name ELB
    Value: !GetAtt ALB.DNSName

  
